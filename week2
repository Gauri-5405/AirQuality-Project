# -----------------------------
# 1. Import Libraries
# -----------------------------
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix, ConfusionMatrixDisplay
from sklearn.preprocessing import LabelEncoder

# -----------------------------
# 2. Load Dataset (fix headers)
# -----------------------------
file_path = r"C:\Users\Gauri Saraf\Desktop\AirQuality\notebooks\Combined_AirQualityData.csv"

# Correct column names
columns = ['City','Date','PM2.5','PM10','NO','NO2','NOx','NH3','CO','SO2','O3',
           'Benzene','Toluene','Xylene','AQI','AQI_Bucket','Datetime','StationId',
           'StationName','State','Status']

# Read CSV and skip first messy row
df = pd.read_csv(file_path, header=None, names=columns, skiprows=1, low_memory=False)

# -----------------------------
# 3. Drop rows with missing AQI
# -----------------------------
df = df[df['AQI'].notna()]
df['AQI'] = pd.to_numeric(df['AQI'], errors='coerce')
df = df[df['AQI'].notna()]

# -----------------------------
# 4. Create AQI Categories
# -----------------------------
def classify_aqi(aqi):
    if aqi <= 50:
        return "Good"
    elif aqi <= 100:
        return "Satisfactory"
    elif aqi <= 200:
        return "Moderate"
    elif aqi <= 300:
        return "Poor"
    elif aqi <= 400:
        return "Very Poor"
    else:
        return "Severe"

df['AQI_Category'] = df['AQI'].apply(classify_aqi)

# -----------------------------
# 5. Preprocessing Function
# -----------------------------
def preprocess_data(df):
    df = df.copy()

    # Encode target
    le_y = LabelEncoder()
    df["AQI_Category_Label"] = le_y.fit_transform(df["AQI_Category"])
    y = df["AQI_Category_Label"]

    # Encode City
    if "City" in df.columns:
        le_city = LabelEncoder()
        df["City_encoded"] = le_city.fit_transform(df["City"])
    else:
        df["City_encoded"] = 0

    # Drop non-numeric columns
    drop_cols = ["AQI", "AQI_Category", "AQI_Category_Label", "City", "Date",
                 "Datetime","StationId","StationName","State","Status"]
    X = df.drop(drop_cols, axis=1, errors="ignore")

    # Add encoded City
    if "City_encoded" in df.columns:
        X["City_encoded"] = df["City_encoded"]

    # Convert all features to numeric
    for col in X.columns:
        X[col] = pd.to_numeric(X[col], errors='coerce')

    # Fill NaN with 0
    X = X.fillna(0)

    return X, y, le_y

# -----------------------------
# 6. Apply Preprocessing
# -----------------------------
X, y, le_y = preprocess_data(df)

print("âœ… Features used for training:", X.columns.tolist())
print("âœ… Target classes:", le_y.classes_)

# -----------------------------
# 7. Train/Test Split
# -----------------------------
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y
)

# -----------------------------
# 8. Train RandomForest Model
# -----------------------------
model = RandomForestClassifier(class_weight="balanced", random_state=42)
model.fit(X_train, y_train)

# -----------------------------
# 9. Predictions & Evaluation
# -----------------------------
y_pred = model.predict(X_test)

print("\nðŸ“Š Classification Report:\n", classification_report(y_test, y_pred, target_names=le_y.classes_))

cm = confusion_matrix(y_test, y_pred)
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=le_y.classes_)
disp.plot(cmap="Blues", xticks_rotation=45)
plt.title("Confusion Matrix")
plt.show()

# -----------------------------
# 10. Feature Importance
# -----------------------------
importances = model.feature_importances_
indices = np.argsort(importances)[::-1]

plt.figure(figsize=(8,5))
sns.barplot(x=importances[indices], y=X.columns[indices])
plt.title("Feature Importance")
plt.xlabel("Importance")
plt.ylabel("Feature")
plt.show()

# -----------------------------
# 11. Decode Predictions (Optional)
# -----------------------------
y_pred_labels = le_y.inverse_transform(y_pred)
print("Sample predictions (decoded):", y_pred_labels[:10])
